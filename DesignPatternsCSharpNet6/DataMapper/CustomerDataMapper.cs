using System.Data;
using System.Data.SqlClient;

namespace DesignPatternsCSharpNet6.DataMapper;

public static class CustomerDataMapper
{
    private static string s_connectionString =
        "Data Source=(local);Initial Catalog=DesignPatterns;Integrated Security=True";

    public static async Task<Customer> GetByIdAsync(int id)
    {
        await using SqlConnection connection = new SqlConnection(s_connectionString);
        connection.Open();

        await using SqlCommand command = connection.CreateCommand();
        command.CommandType = CommandType.Text;

        command.CommandText = "SELECT TOP 1 * FROM [Customer] WHERE [Id] = @Id";
        command.Parameters.AddWithValue("@Id", id);

        SqlDataReader reader = await command.ExecuteReaderAsync();

        // If the query returned a row, create the Customer object and return it.
        if (reader.HasRows)
        {
            reader.Read();

            string name = (string)reader["Name"];
            bool isPremiumMember = (bool)reader["IsPremiumMember"];

            return new Customer(id, name, isPremiumMember);
        }

        return null;
    }

    // INSERT if new, otherwise UPDATE in the database
    public static async void SaveAsync(Customer customer)
    {
        if (customer.Id == 0)
        {
            await using SqlConnection connection = new SqlConnection(s_connectionString);
            connection.Open();

            await using SqlCommand command = connection.CreateCommand();
            command.CommandType = CommandType.Text;

            // SELECT SCOPE_IDENTITY() returns the Id value the database created
            command.CommandText =
                "INSERT INTO [Customer] ([Name], [IsPremiumMember]) VALUES (@Name, @IsPremiumMember); SELECT SCOPE_IDENTITY();";
            command.Parameters.AddWithValue("@Name", customer.Name);
            command.Parameters.AddWithValue("@IsPremiumMember", customer.IsPremiumMember);

            // Get the Id generated by the database and save it to the object's property
            customer.Id = (int)await command.ExecuteScalarAsync();
        }
        else
        {
            await using SqlConnection connection = new SqlConnection(s_connectionString);
            connection.Open();

            await using SqlCommand command = connection.CreateCommand();
            command.CommandType = CommandType.Text;

            command.CommandText =
                "UPDATE [Customer] SET [Name] = @Name, [IsPremiumMember] = @IsPremiumMember WHERE [Id] = @Id";
            command.Parameters.AddWithValue("@Name", customer.Name);
            command.Parameters.AddWithValue("@IsPremiumMember", customer.IsPremiumMember);
            command.Parameters.AddWithValue("@Id", customer.Id);

            await command.ExecuteNonQueryAsync();
        }
    }

    // We also could have only passed in the Id for this method, 
    // because that is the only value from the Customer object that this method needs.
    public static async void Delete(Customer customer)
    {
        await using SqlConnection connection = new SqlConnection(s_connectionString);
        connection.Open();

        await using SqlCommand command = connection.CreateCommand();
        command.CommandType = CommandType.Text;

        command.CommandText = "DELETE FROM [Customer] WHERE [Id] = @Id";
        command.Parameters.AddWithValue("@Id", customer.Id);

        await command.ExecuteNonQueryAsync();
    }
}